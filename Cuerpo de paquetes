/*
*
*   CUERPOS
*   DE
*   PAQUETES
*
*/


CREATE OR REPLACE PACKAGE BODY PRUEBAS_CLIENTES AS		
PROCEDURE INICIALIZAR AS	
BEGIN	
    /* BORRAR CONTENIDO DE LA TABLA */
    DELETE FROM CLIENTES;	
END INICIALIZAR;
PROCEDURE INSERTAR	
  (NOMBRE_PRUEBA      VARCHAR2,
  C_DIREC IN CLIENTES.DIRECCION%TYPE,
  C_TLF IN CLIENTES.TELEFONO%TYPE,
  SALIDAESPERADA     BOOLEAN)	
AS		
SALIDA BOOLEAN := TRUE;	
P_CLIENTES CLIENTES%ROWTYPE;	
P_OID_CLIENTE CLIENTES.OID_CLIENTE%TYPE;
BEGIN
   	
    /* INSERTAR CLIENTES */	
    INSERT INTO CLIENTES(OID_CLIENTE, DIRECCION, TELEFONO)
    VALUES(SEC_CLIENTES.NEXTVAL, C_DIREC, C_TLF);
    /* SELECCIONAR CLIENTES Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
    P_OID_CLIENTE := SEC_CLIENTES.CURRVAL;
    SELECT * INTO P_CLIENTES FROM CLIENTES WHERE OID_CLIENTE = P_OID_CLIENTE;
    IF (P_CLIENTES.DIRECCION <> C_DIREC OR
    P_CLIENTES.TELEFONO <> C_TLF
    ) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
   	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END INSERTAR;


PROCEDURE MODIFICAR (
  NOMBRE_PRUEBA VARCHAR2,
  C_OID IN CLIENTES.OID_CLIENTE%TYPE,
  C_DIREC IN CLIENTES.DIRECCION%TYPE,
  C_TLF IN CLIENTES.TELEFONO%TYPE,	
  SALIDAESPERADA BOOLEAN)
AS		
SALIDA BOOLEAN := TRUE;
P_CLIENTES CLIENTES%ROWTYPE;
BEGIN
    /* ACTUALIZAR CLIENTES */
    UPDATE CLIENTES SET DIRECCION = C_DIREC WHERE C_OID = OID_CLIENTE;
    UPDATE CLIENTES SET TELEFONO  = C_TLF   WHERE C_OID = OID_CLIENTE;
    /* SELECCIONAR CLIENTES Y COMPROBAR QUE LOS CAMPOS SE HAN ACTUALIZADO CORRECTAMENTE */
    SELECT * INTO P_CLIENTES FROM CLIENTES WHERE C_OID = OID_CLIENTE;
    IF (P_CLIENTES.DIRECCION <> C_DIREC OR
    P_CLIENTES.TELEFONO <> C_TLF
    ) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
  	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END MODIFICAR;

PROCEDURE ELIMINAR 
  (NOMBRE_PRUEBA      VARCHAR2,
  C_OID IN CLIENTES.OID_CLIENTE%TYPE,
  SALIDAESPERADA       BOOLEAN)
AS	
SALIDA BOOLEAN := TRUE;	
N_CLIENTES NUMBER;
BEGIN	
    /* ELIMINAR CLIENTES */	
    DELETE FROM CLIENTES WHERE OID_CLIENTE = C_OID;	
    	
    /* VERIFICAR QUE EL CLIENTE NO SE ENCUENTRA EN LA BD */	
    SELECT COUNT (*) INTO N_CLIENTES FROM CLIENTES WHERE OID_CLIENTE = C_OID;	
    IF(N_CLIENTES<>0) THEN
      SALIDA := FALSE;	
    END IF;	
    COMMIT WORK;	
    	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));	
EXCEPTION	
WHEN OTHERS THEN 	
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));	
    ROLLBACK;
END ELIMINAR;
END PRUEBAS_CLIENTES;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_PEDIDOS AS		
PROCEDURE INICIALIZAR AS	
BEGIN	
    /* BORRAR CONTENIDO DE LA TABLA */
    DELETE FROM PEDIDOS;	
END INICIALIZAR;
PROCEDURE INSERTAR	
  (NOMBRE_PRUEBA       VARCHAR2,	
  P_COM IN PEDIDOS.COMENTARIO%TYPE,	
  P_VAL IN PEDIDOS.VALORACION%TYPE,	
  P_FECH IN PEDIDOS.FECHA%TYPE,	
  P_OID IN PEDIDOS.OID_CLIENTE%TYPE,	
   SALIDAESPERADA      BOOLEAN)	
AS		
SALIDA BOOLEAN := TRUE;	
P_PEDIDOS PEDIDOS%ROWTYPE;	
P_ID_PEDIDO PEDIDOS.ID_PEDIDO%TYPE;
BEGIN
   	
    /* INSERTAR PEDIDOS */	
    INSERT INTO PEDIDOS(ID_PEDIDO,COMENTARIO,VALORACION,FECHA,OID_CLIENTE)
    VALUES(SEC_PEDIDOS.NEXTVAL, P_COM, P_VAL, P_FECH, P_OID);
    /* SELECCIONAR PEDIDOS Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
    P_ID_PEDIDO := SEC_PEDIDOS.CURRVAL;
    SELECT * INTO P_PEDIDOS FROM PEDIDOS WHERE ID_PEDIDO = P_ID_PEDIDO;
    IF (P_PEDIDOS.COMENTARIO <> P_COM OR
    P_PEDIDOS.VALORACION <> P_VAL OR
    P_PEDIDOS.FECHA <> P_FECH OR
    P_PEDIDOS.OID_CLIENTE<> P_OID) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
   	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END INSERTAR;
PROCEDURE MODIFICAR (
  NOMBRE_PRUEBA VARCHAR2,
  P_ID_PEDIDO IN PEDIDOS.ID_PEDIDO%TYPE,
  P_COM IN PEDIDOS.COMENTARIO%TYPE,
  P_VAL IN PEDIDOS.VALORACION%TYPE,
  P_FECH IN PEDIDOS.FECHA%TYPE,
  P_OID IN PEDIDOS.OID_CLIENTE%TYPE,	
  SALIDAESPERADA BOOLEAN)
AS		
SALIDA BOOLEAN := TRUE;
P_PEDIDOS PEDIDOS%ROWTYPE;
BEGIN
    /* ACTUALIZAR PEDIDOS */
    UPDATE PEDIDOS SET ID_PEDIDO=P_ID_PEDIDO    WHERE P_ID_PEDIDO = ID_PEDIDO;
    UPDATE PEDIDOS SET COMENTARIO=P_COM    WHERE P_ID_PEDIDO = ID_PEDIDO;
    UPDATE PEDIDOS SET FECHA=P_FECH    WHERE P_ID_PEDIDO = ID_PEDIDO;
    UPDATE PEDIDOS SET VALORACION=P_VAL        WHERE P_ID_PEDIDO = ID_PEDIDO;
    UPDATE PEDIDOS SET OID_CLIENTE= P_OID   WHERE P_ID_PEDIDO = ID_PEDIDO;
    /* SELECCIONAR PEDIDOS Y COMPROBAR QUE LOS CAMPOS SE HAN ACTUALIZADO CORRECTAMENTE */
    SELECT * INTO P_PEDIDOS FROM PEDIDOS WHERE P_OID = ID_PEDIDO;
    IF(P_PEDIDOS.FECHA<>P_FECH OR
    P_PEDIDOS.VALORACION<>P_VAL OR
    P_PEDIDOS.ID_PEDIDO<>P_ID_PEDIDO) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
  	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END MODIFICAR;
PROCEDURE ELIMINAR (
  NOMBRE_PRUEBA VARCHAR2,
  P_ID_PEDIDO IN PEDIDOS.ID_PEDIDO%TYPE,
  SALIDAESPERADA BOOLEAN)
AS	
SALIDA BOOLEAN := TRUE;	
N_PEDIDOS NUMBER;
BEGIN	
    /* ELIMINAR PEDIDOS */	
    DELETE FROM PEDIDOS WHERE ID_PEDIDO = P_ID_PEDIDO;	
    	
    /* VERIFICAR QUE EL PEDIDOS NO SE ENCUENTRA EN LA BD */	
    SELECT COUNT (*) INTO N_PEDIDOS FROM PEDIDOS WHERE ID_PEDIDO = P_ID_PEDIDO;	
    IF(N_PEDIDOS<>0) THEN
      SALIDA := FALSE;	
    END IF;	
    COMMIT WORK;	
    	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));	
EXCEPTION	
WHEN OTHERS THEN 	
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));	
    ROLLBACK;
END ELIMINAR;
END PRUEBAS_PEDIDOS;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_PEDIDOSLOCAL AS

    PROCEDURE INICIALIZAR AS
    BEGIN
        DELETE FROM PEDIDOSLOCAL;
    END INICIALIZAR;
    
    PROCEDURE INSERTAR(
        NOMBRE_PRUEBA       VARCHAR2,
        P_ID IN PEDIDOSLOCAL.ID_PEDIDO%TYPE,
        SALIDAESPERADA BOOLEAN
        )
    AS
        SALIDA BOOLEAN := TRUE;
        P_PEDIDOSLOCAL PEDIDOSLOCAL%ROWTYPE;
    BEGIN
        INSERT INTO PEDIDOSLOCAL (ID_PEDIDO)
        VALUES (P_ID);
        
        SELECT * INTO P_PEDIDOSLOCAL FROM PEDIDOSLOCAL WHERE ID_PEDIDO = P_ID;
        IF (P_PEDIDOSLOCAL.ID_PEDIDO <> P_ID) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
        
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
        EXCEPTION
        WHEN OTHERS THEN 
             DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
        ROLLBACK;
    END INSERTAR;
    
    PROCEDURE MODIFICAR(
        NOMBRE_PRUEBA       VARCHAR2,
        P_ID IN PEDIDOSLOCAL.ID_PEDIDO%TYPE,
        SALIDAESPERADA BOOLEAN
        ) AS
        SALIDA BOOLEAN := TRUE;
        P_PEDIDOSLOCAL PEDIDOSLOCAL%ROWTYPE;
    BEGIN
        UPDATE PEDIDOSLOCAL SET
        ID_PEDIDO = P_ID
        WHERE ID_PEDIDO = P_ID;
    
        SELECT * INTO P_PEDIDOSLOCAL FROM PEDIDOSLOCAL WHERE ID_PEDIDO = P_ID;
        IF(P_PEDIDOSLOCAL.ID_PEDIDO<>P_ID) THEN
          SALIDA := FALSE;
        END IF;
        COMMIT WORK;
    
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
        EXCEPTION
        WHEN OTHERS THEN 
             DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
        ROLLBACK;
    END MODIFICAR;
    
    PROCEDURE ELIMINAR(
        NOMBRE_PRUEBA       VARCHAR2,
        P_ID IN PEDIDOSLOCAL.ID_PEDIDO%TYPE,
        SALIDAESPERADA BOOLEAN
        ) AS
        SALIDA BOOLEAN := TRUE;
        CONT NUMBER;
    BEGIN
        DELETE FROM PEDIDOSLOCAL WHERE ID_PEDIDO = P_ID;
        
        SELECT COUNT (*) INTO CONT FROM PEDIDOSLOCAL WHERE ID_PEDIDO = P_ID;
        IF(CONT<>0) THEN
          SALIDA := FALSE;
        END IF;
        COMMIT WORK;
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
        EXCEPTION
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
        ROLLBACK;
    END ELIMINAR;

END PRUEBAS_PEDIDOSLOCAL;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_VEHICULOS AS

PROCEDURE INICIALIZAR AS
BEGIN
    /* BORRAR CONTENIDO DE LA TABLA */
    DELETE FROM VEHICULOS;
END INICIALIZAR;

PROCEDURE INSERTAR
  (NOMBRE_PRUEBA       VARCHAR2,
  V_MAT IN VEHICULOS.MATRICULA%TYPE,
  V_TIP IN VEHICULOS.TIPOVEHICULO%TYPE,
  SALIDAESPERADA     BOOLEAN)
   
AS

SALIDA BOOLEAN := TRUE;
P_VEHICULOS VEHICULOS%ROWTYPE;

BEGIN
    
    /* INSERTAR VEHICULOS */
    INSERT INTO VEHICULOS(MATRICULA, TIPOVEHICULO)
    VALUES(V_MAT, V_TIP);

    /* SELECCIONAR VEHICULOS Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
    SELECT * INTO P_VEHICULOS FROM VEHICULOS WHERE MATRICULA = V_MAT;
    IF (P_VEHICULOS.TIPOVEHICULO <> V_TIP) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END INSERTAR;

PROCEDURE MODIFICAR (
  NOMBRE_PRUEBA VARCHAR2,
  V_MAT IN VEHICULOS.MATRICULA%TYPE,
  V_TIP IN VEHICULOS.TIPOVEHICULO%TYPE,

  SALIDAESPERADA BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
P_VEHICULOS VEHICULOS%ROWTYPE;


BEGIN
    
    /* ACTUALIZAR VEHICULOS */
    UPDATE VEHICULOS SET MATRICULA =     V_MAT                WHERE MATRICULA = V_MAT;
    UPDATE VEHICULOS SET TIPOVEHICULO =  V_TIP                WHERE MATRICULA = V_MAT;
    /* SELECCIONAR VEHICULOS Y COMPROBAR QUE LOS CAMPOS SE HAN ACTUALIZADO CORRECTAMENTE */
    SELECT * INTO P_VEHICULOS FROM VEHICULOS WHERE MATRICULA = V_MAT;
    IF(P_VEHICULOS.TIPOVEHICULO<>V_TIP OR
    P_VEHICULOS.MATRICULA<>V_MAT) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END MODIFICAR;

PROCEDURE ELIMINAR (
  NOMBRE_PRUEBA         VARCHAR2,
  V_MAT IN VEHICULOS.MATRICULA%TYPE,
  
  SALIDAESPERADA       BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
N_VEHICULOS NUMBER;

BEGIN

    /* ELIMINAR VEHICULOS */
    DELETE FROM VEHICULOS WHERE MATRICULA = V_MAT;
    
    /* VERIFICAR QUE EL VEHICULOS NO SE ENCUENTRA EN LA BD */
    SELECT COUNT (*) INTO N_VEHICULOS FROM VEHICULOS WHERE MATRICULA = V_MAT;
    IF(N_VEHICULOS<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END ELIMINAR;

END PRUEBAS_VEHICULOS;

/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_REPARTIDORES AS

    PROCEDURE INICIALIZAR AS
    BEGIN
        DELETE FROM REPARTIDORES;
    END INICIALIZAR;
    
    PROCEDURE INSERTAR
        (NOMBRE_PRUEBA      VARCHAR2,
        R_DNI IN REPARTIDORES.DNI%TYPE,
        R_NOM IN REPARTIDORES.NOMBRE%TYPE,
        R_SUEL IN REPARTIDORES.SUELDO%TYPE,
        R_NUM IN REPARTIDORES.NUMCUENTABANCARIA%TYPE,
        SALIDAESPERADA     BOOLEAN)
    AS
        R_REPARTIDOR REPARTIDORES%ROWTYPE;
        SALIDA BOOLEAN := TRUE;
    BEGIN
        INSERT INTO REPARTIDORES(DNI, NOMBRE, SUELDO, NUMCUENTABANCARIA)
        VALUES (R_DNI, R_NOM, R_SUEL, R_NUM);
        
        SELECT * INTO R_REPARTIDOR FROM REPARTIDORES WHERE DNI = R_DNI;
        IF (R_REPARTIDOR.NOMBRE <> R_NOM OR R_REPARTIDOR.SUELDO <> R_SUEL OR R_REPARTIDOR.NUMCUENTABANCARIA <> R_NUM) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
        /* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
    END INSERTAR;
  
    PROCEDURE MODIFICAR
        (NOMBRE_PRUEBA      VARCHAR2,
        R_DNI IN REPARTIDORES.DNI%TYPE,
        R_NOM IN REPARTIDORES.NOMBRE%TYPE,
        R_SUEL IN REPARTIDORES.SUELDO%TYPE,
        R_NUM IN REPARTIDORES.NUMCUENTABANCARIA%TYPE,
        SALIDAESPERADA     BOOLEAN)
    AS
        R_REPARTIDOR REPARTIDORES%ROWTYPE;
        SALIDA BOOLEAN := TRUE;
    BEGIN
        UPDATE REPARTIDORES SET
        DNI = R_DNI,
        NOMBRE = R_NOM,
        SUELDO = R_SUEL,
        NUMCUENTABANCARIA = R_NUM
        WHERE DNI = R_DNI;
        
        SELECT * INTO R_REPARTIDOR FROM REPARTIDORES WHERE DNI = R_DNI;
        IF (R_REPARTIDOR.NOMBRE <> R_NOM OR R_REPARTIDOR.SUELDO <> R_SUEL OR R_REPARTIDOR.NUMCUENTABANCARIA <> R_NUM) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
        EXCEPTION
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
        ROLLBACK;
    END MODIFICAR;
  
    PROCEDURE ELIMINAR
        (NOMBRE_PRUEBA     VARCHAR2,
        R_DNI IN REPARTIDORES.DNI%TYPE,
        SALIDAESPERADA      BOOLEAN)
    AS
        SALIDA BOOLEAN := TRUE;
        CONT NUMBER;
    BEGIN
        DELETE FROM REPARTIDORES WHERE DNI = R_DNI;
        
        SELECT COUNT (*) INTO CONT FROM REPARTIDORES WHERE DNI = R_DNI;
        IF(CONT<>0) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
    
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
        EXCEPTION
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
        ROLLBACK;
    END ELIMINAR;
END PRUEBAS_REPARTIDORES;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_COCINEROS AS

    PROCEDURE INICIALIZAR AS
    BEGIN
        DELETE FROM COCINEROS;
    END INICIALIZAR;
    
    PROCEDURE INSERTAR
        (NOMBRE_PRUEBA      VARCHAR2,
        C_DNI IN COCINEROS.DNI%TYPE,
        C_NOM IN COCINEROS.NOMBRE%TYPE,
        C_SUEL IN COCINEROS.SUELDO%TYPE,
        C_NUM IN COCINEROS.NUMCUENTABANCARIA%TYPE,
        SALIDAESPERADA     BOOLEAN)
    AS
        C_COCINERO COCINEROS%ROWTYPE;
        SALIDA BOOLEAN := TRUE;
    BEGIN
        INSERT INTO COCINEROS(DNI, NOMBRE, SUELDO, NUMCUENTABANCARIA)
        VALUES (C_DNI, C_NOM, C_SUEL, C_NUM);
        
        SELECT * INTO C_COCINERO FROM COCINEROS WHERE DNI = C_DNI;
        IF (C_COCINERO.NOMBRE <> C_NOM OR C_COCINERO.SUELDO <> C_SUEL OR C_COCINERO.NUMCUENTABANCARIA <> C_NUM) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
        /* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
    END INSERTAR;
  
    PROCEDURE MODIFICAR
        (NOMBRE_PRUEBA      VARCHAR2,
        C_DNI IN COCINEROS.DNI%TYPE,
        C_NOM IN COCINEROS.NOMBRE%TYPE,
        C_SUEL IN COCINEROS.SUELDO%TYPE,
        C_NUM IN COCINEROS.NUMCUENTABANCARIA%TYPE,
        SALIDAESPERADA     BOOLEAN)
    AS
        C_COCINERO COCINEROS%ROWTYPE;
        SALIDA BOOLEAN := TRUE;
    BEGIN
        UPDATE COCINEROS SET
        DNI = C_DNI,
        NOMBRE = C_NOM,
        SUELDO = C_SUEL,
        NUMCUENTABANCARIA = C_NUM
        WHERE DNI = C_DNI;
        
        SELECT * INTO C_COCINERO FROM COCINEROS WHERE DNI = C_DNI;
        IF (C_COCINERO.NOMBRE <> C_NOM OR 
        C_COCINERO.SUELDO <> C_SUEL OR 
        C_COCINERO.NUMCUENTABANCARIA <> C_NUM) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
        
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
        EXCEPTION
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
        ROLLBACK;
    END MODIFICAR;
  
    PROCEDURE ELIMINAR
        (NOMBRE_PRUEBA     VARCHAR2,
        C_DNI IN COCINEROS.DNI%TYPE,
        SALIDAESPERADA      BOOLEAN)
    AS
        SALIDA BOOLEAN := TRUE;
        CONT NUMBER;
    BEGIN
        DELETE FROM COCINEROS WHERE DNI = C_DNI;
        
        SELECT COUNT (*) INTO CONT FROM COCINEROS WHERE DNI = C_DNI;
        IF(CONT<>0) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
    
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
        EXCEPTION
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
        ROLLBACK;
    END ELIMINAR;
END PRUEBAS_COCINEROS;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_ORDERTAKERS AS

    PROCEDURE INICIALIZAR AS
    BEGIN
        DELETE FROM ORDERTAKERS;
    END INICIALIZAR;
    
    PROCEDURE INSERTAR
        (NOMBRE_PRUEBA      VARCHAR2,
        O_DNI IN ORDERTAKERS.DNI%TYPE,
        O_NOM IN ORDERTAKERS.NOMBRE%TYPE,
        O_SULD IN ORDERTAKERS.SUELDO%TYPE,
        O_NUM IN ORDERTAKERS.NUMCUENTABANCARIA%TYPE,
        SALIDAESPERADA     BOOLEAN)
    AS
        O_ORDERTAKER ORDERTAKERS%ROWTYPE;
        SALIDA BOOLEAN := TRUE;
    BEGIN
        INSERT INTO ORDERTAKERS(DNI, NOMBRE, SUELDO, NUMCUENTABANCARIA)
        VALUES (O_DNI, O_NOM, O_SULD, O_NUM);
        
        SELECT * INTO O_ORDERTAKER FROM ORDERTAKERS WHERE DNI = O_DNI;
        IF (O_ORDERTAKER.NOMBRE <> O_NOM OR O_ORDERTAKER.SUELDO <> O_SULD OR O_ORDERTAKER.NUMCUENTABANCARIA <> O_NUM) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
        /* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
    END INSERTAR;
  
    PROCEDURE MODIFICAR
        (NOMBRE_PRUEBA      VARCHAR2,
        O_DNI IN ORDERTAKERS.DNI%TYPE,
        O_NOM IN ORDERTAKERS.NOMBRE%TYPE,
        O_SULD IN ORDERTAKERS.SUELDO%TYPE,
        O_NUM IN ORDERTAKERS.NUMCUENTABANCARIA%TYPE,
        SALIDAESPERADA     BOOLEAN)
    AS
        O_ORDERTAKER ORDERTAKERS%ROWTYPE;
        SALIDA BOOLEAN := TRUE;
    BEGIN
        UPDATE ORDERTAKERS SET
        DNI = O_DNI,
        NOMBRE = O_NOM,
        SUELDO = O_SULD,
        NUMCUENTABANCARIA = O_NUM
        WHERE DNI = O_DNI;
        
        SELECT * INTO O_ORDERTAKER FROM ORDERTAKERS WHERE DNI = O_DNI;
        IF (O_ORDERTAKER.NOMBRE <> O_NOM OR O_ORDERTAKER.SUELDO <> O_SULD OR O_ORDERTAKER.NUMCUENTABANCARIA <> O_NUM) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
        EXCEPTION
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
        ROLLBACK;
    END MODIFICAR;
  
    PROCEDURE ELIMINAR
        (NOMBRE_PRUEBA     VARCHAR2,
        O_DNI IN ORDERTAKERS.DNI%TYPE,
        SALIDAESPERADA      BOOLEAN)
    AS
        SALIDA BOOLEAN := TRUE;
        CONT NUMBER;
    BEGIN
        DELETE FROM ORDERTAKERS WHERE DNI = O_DNI;
        
        SELECT COUNT (*) INTO CONT FROM ORDERTAKERS WHERE DNI = O_DNI;
        IF(CONT<>0) THEN
            SALIDA := FALSE;
        END IF;
        COMMIT WORK;
    
        DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
        EXCEPTION
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
        ROLLBACK;
    END ELIMINAR;
END PRUEBAS_ORDERTAKERS;
/


CREATE OR REPLACE PACKAGE BODY PRUEBAS_REPARTOS AS

PROCEDURE INICIALIZAR AS
BEGIN
DELETE FROM REPARTOS;
END INICIALIZAR;


PROCEDURE INSERTAR (
    NOMBRE_PRUEBA VARCHAR2,
    RE_HI IN REPARTOS.HORAINICIO%TYPE,
    RE_HF IN REPARTOS.HORAFIN%TYPE,
    RE_DNI IN REPARTOS.DNI_REPARTIDOR%TYPE,
    RE_MAT IN REPARTOS.MATRICULA%TYPE,
    SALIDAESPERADA BOOLEAN
) AS

SALIDA BOOLEAN := TRUE;
P_REPARTOS REPARTOS%ROWTYPE;
P_OID_REPARTO REPARTOS.OID_REPARTO%TYPE;

BEGIN


INSERT INTO REPARTOS (OID_REPARTO, HORAINICIO, HORAFIN, DNI_REPARTIDOR, MATRICULA)
VALUES (SEC_REPARTOS.NEXTVAL, RE_HI, RE_HF, RE_DNI, RE_MAT);
P_OID_REPARTO := SEC_REPARTOS.CURRVAL;
SELECT * INTO P_REPARTOS FROM REPARTOS WHERE OID_REPARTO = P_OID_REPARTO;
  IF (P_REPARTOS.HORAINICIO <> RE_HI OR
  P_REPARTOS.HORAFIN <> RE_HF OR
  P_REPARTOS.DNI_REPARTIDOR <> RE_DNI OR
  P_REPARTOS.MATRICULA <> RE_MAT) THEN
    SALIDA := FALSE;
  END IF;
  COMMIT WORK;


/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;


END INSERTAR;


PROCEDURE MODIFICAR(
    NOMBRE_PRUEBA VARCHAR2,
    RE_OID IN REPARTOS.OID_REPARTO%TYPE,
    RE_HI IN REPARTOS.HORAINICIO%TYPE,
    RE_HF IN REPARTOS.HORAFIN%TYPE,
    RE_DNI IN REPARTOS.DNI_REPARTIDOR%TYPE,
    RE_MAT IN REPARTOS.MATRICULA%TYPE,
    SALIDAESPERADA BOOLEAN
    ) AS

SALIDA BOOLEAN := TRUE;
P_REPARTOS REPARTOS%ROWTYPE;

BEGIN
UPDATE REPARTOS SET
    OID_REPARTO = RE_OID,
    HORAINICIO = RE_HI,
    HORAFIN = RE_HF,
    DNI_REPARTIDOR = RE_DNI,
    MATRICULA = RE_MAT
WHERE OID_REPARTO = RE_OID;
SELECT * INTO P_REPARTOS FROM REPARTOS WHERE OID_REPARTO = RE_OID;
  IF (P_REPARTOS.HORAINICIO <> RE_HI OR
  P_REPARTOS.HORAFIN <> RE_HF OR
  P_REPARTOS.DNI_REPARTIDOR <> RE_DNI OR
  P_REPARTOS.MATRICULA <> RE_MAT) THEN
    SALIDA := FALSE;
  END IF;
  COMMIT WORK;


/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END MODIFICAR;


PROCEDURE ELIMINAR(
NOMBRE_PRUEBA VARCHAR2,
RE_OID IN REPARTOS.OID_REPARTO%TYPE,
SALIDAESPERADA BOOLEAN
)
AS
N_REPARTOS NUMBER;
SALIDA BOOLEAN := TRUE;

BEGIN
    DELETE FROM REPARTOS WHERE OID_REPARTO = RE_OID;
    SELECT COUNT (*) INTO N_REPARTOS FROM REPARTOS WHERE OID_REPARTO = RE_OID;
    IF(N_REPARTOS<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;

/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END ELIMINAR;
END PRUEBAS_REPARTOS;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_PEDIDOSDOMICILIO AS

PROCEDURE INICIALIZAR AS
BEGIN
DELETE FROM PEDIDOSDOMICILIO;
END;


PROCEDURE INSERTAR(
    NOMBRE_PRUEBA     VARCHAR2,
    PD_ID IN PEDIDOSDOMICILIO.ID_PEDIDO%TYPE,
    PD_OID IN PEDIDOSDOMICILIO.OID_REPARTO%TYPE,
    SALIDAESPERADA      BOOLEAN
) AS

SALIDA BOOLEAN := TRUE;
P_PEDIDOSDOMICILIO PEDIDOSDOMICILIO%ROWTYPE;

BEGIN
INSERT INTO PEDIDOSDOMICILIO (ID_PEDIDO, OID_REPARTO)
VALUES (PD_ID, PD_OID);
SELECT * INTO P_PEDIDOSDOMICILIO FROM PEDIDOSDOMICILIO WHERE ID_PEDIDO = PD_ID;
  IF (P_PEDIDOSDOMICILIO.ID_PEDIDO <> PD_ID OR
    P_PEDIDOSDOMICILIO.OID_REPARTO <> PD_OID) THEN
    SALIDA := FALSE;
  END IF;
  COMMIT WORK;
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END INSERTAR;


PROCEDURE MODIFICAR(
    NOMBRE_PRUEBA       VARCHAR2,
    PD_ID IN PEDIDOSDOMICILIO.ID_PEDIDO%TYPE,
    PD_OID IN PEDIDOSDOMICILIO.OID_REPARTO%TYPE,
    SALIDAESPERADA     BOOLEAN
    ) AS

SALIDA BOOLEAN := TRUE;
P_PEDIDOSDOMICILIO PEDIDOSDOMICILIO%ROWTYPE;
BEGIN
UPDATE PEDIDOSDOMICILIO SET
    ID_PEDIDO = PD_ID,
    OID_REPARTO = PD_OID

WHERE ID_PEDIDO = PD_ID;
SELECT * INTO P_PEDIDOSDOMICILIO FROM PEDIDOSDOMICILIO WHERE ID_PEDIDO = PD_ID;
IF (P_PEDIDOSDOMICILIO.ID_PEDIDO <> PD_ID OR
  P_PEDIDOSDOMICILIO.OID_REPARTO <> PD_OID) THEN
    SALIDA := FALSE;
  END IF;
  COMMIT WORK;
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END MODIFICAR;


PROCEDURE ELIMINAR(
    NOMBRE_PRUEBA      VARCHAR2,
    PD_ID IN PEDIDOSDOMICILIO.ID_PEDIDO%TYPE,
    SALIDAESPERADA      BOOLEAN
)
AS
N_PEDIDOSDOMICILIO NUMBER;
SALIDA BOOLEAN := TRUE;
BEGIN
    DELETE FROM PEDIDOSDOMICILIO WHERE ID_PEDIDO = PD_ID;
    SELECT COUNT (*) INTO N_PEDIDOSDOMICILIO FROM PEDIDOSDOMICILIO WHERE ID_PEDIDO = PD_ID;
    IF(N_PEDIDOSDOMICILIO<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;

/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END ELIMINAR;
END PRUEBAS_PEDIDOSDOMICILIO;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_TIPOSALERGENOS AS		
PROCEDURE INICIALIZAR AS	
BEGIN	
    /* BORRAR CONTENIDO DE LA TABLA */
    DELETE FROM TIPOSALERGENOS;	
END INICIALIZAR;
PROCEDURE INSERTAR	
  (NOMBRE_PRUEBA        VARCHAR2,
  T_TA IN TIPOSALERGENOS.TIPOALERGENO%TYPE,
  SALIDAESPERADA      BOOLEAN)	
AS		
SALIDA BOOLEAN := TRUE;	
P_TIPOSALERGENOS TIPOSALERGENOS%ROWTYPE;	
BEGIN
   	
    /* INSERTAR TIPOSALERGENOS */	
    INSERT INTO TIPOSALERGENOS(TIPOALERGENO)
    VALUES(T_TA);
    /* SELECCIONAR TIPOSALERGENOS Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
    SELECT * INTO P_TIPOSALERGENOS FROM TIPOSALERGENOS WHERE TIPOALERGENO = T_TA;
    IF (P_TIPOSALERGENOS.TIPOALERGENO <> T_TA) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
   	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END INSERTAR;

PROCEDURE ELIMINAR 
  (NOMBRE_PRUEBA      VARCHAR2,
  T_TA IN TIPOSALERGENOS.TIPOALERGENO%TYPE,
  SALIDAESPERADA       BOOLEAN)
AS	
SALIDA BOOLEAN := TRUE;	
N_TIPOSALERGENOS NUMBER;
BEGIN	
    /* ELIMINAR TIPOSALERGENOS */	
    DELETE FROM TIPOSALERGENOS WHERE TIPOALERGENO = T_TA;	
    	
    /* VERIFICAR QUE EL CLIENTE NO SE ENCUENTRA EN LA BD */	
    SELECT COUNT (*) INTO N_TIPOSALERGENOS FROM TIPOSALERGENOS WHERE TIPOALERGENO = T_TA;	
    IF(N_TIPOSALERGENOS<>0) THEN
      SALIDA := FALSE;	
    END IF;	
    COMMIT WORK;	
    	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));	
EXCEPTION	
WHEN OTHERS THEN 	
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));	
    ROLLBACK;
END ELIMINAR;
END PRUEBAS_TIPOSALERGENOS;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_PRODUCTOS AS		
PROCEDURE INICIALIZAR AS	
BEGIN	
    /* BORRAR CONTENIDO DE LA TABLA */
    DELETE FROM PRODUCTOS;	
END INICIALIZAR;
PROCEDURE INSERTAR	
  (NOMBRE_PRUEBA      VARCHAR2,
  P_N IN PRODUCTOS.NOMBRE%TYPE,
  P_PR IN PRODUCTOS.PRECIO%TYPE,
  P_T IN PRODUCTOS.TAMANO%TYPE,
  SALIDAESPERADA     BOOLEAN)	
AS		
SALIDA BOOLEAN := TRUE;	
P_PRODUCTOS PRODUCTOS%ROWTYPE;	
P_OID_PRODUCTO PRODUCTOS.OID_PRODUCTO%TYPE;
BEGIN
   	
    /* INSERTAR PRODUCTOS */	
    INSERT INTO PRODUCTOS(OID_PRODUCTO,NOMBRE, PRECIO, TAMANO)
    VALUES(SEC_PRODUCTOS.NEXTVAL, P_N, P_PR, P_T);
    /* SELECCIONAR PRODUCTOS Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
    P_OID_PRODUCTO := SEC_PRODUCTOS.CURRVAL;
    SELECT * INTO P_PRODUCTOS FROM PRODUCTOS WHERE OID_PRODUCTO = P_OID_PRODUCTO;
    IF (P_PRODUCTOS.NOMBRE <> P_N OR
    P_PRODUCTOS.PRECIO <> P_PR OR
    P_PRODUCTOS.TAMANO <> P_T
    ) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
   	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END INSERTAR;
PROCEDURE MODIFICAR (
  NOMBRE_PRUEBA VARCHAR2,
  P_OID IN PRODUCTOS.OID_PRODUCTO%TYPE,
  P_N IN PRODUCTOS.NOMBRE%TYPE,
  P_PR IN PRODUCTOS.PRECIO%TYPE,
  P_T IN PRODUCTOS.TAMANO%TYPE,	
  SALIDAESPERADA BOOLEAN)
AS		
SALIDA BOOLEAN := TRUE;
P_PRODUCTOS PRODUCTOS%ROWTYPE;
BEGIN
    /* ACTUALIZAR PRODUCTOS */
    UPDATE PRODUCTOS SET NOMBRE       = P_N               WHERE P_OID = OID_PRODUCTO;
    UPDATE PRODUCTOS SET TAMANO       = P_T               WHERE P_OID = OID_PRODUCTO;
    UPDATE PRODUCTOS SET PRECIO       = P_PR              WHERE P_OID = OID_PRODUCTO;
    /* SELECCIONAR PRODUCTOS Y COMPROBAR QUE LOS CAMPOS SE HAN ACTUALIZADO CORRECTAMENTE */
    SELECT * INTO P_PRODUCTOS FROM PRODUCTOS WHERE P_OID = OID_PRODUCTO;
    IF (P_PRODUCTOS.NOMBRE <> P_N OR
    P_PRODUCTOS.PRECIO <> P_PR OR
    P_PRODUCTOS.TAMANO <> P_T
    ) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
  	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END MODIFICAR;

PROCEDURE ELIMINAR 
  (NOMBRE_PRUEBA      VARCHAR2,
  P_OID IN PRODUCTOS.OID_PRODUCTO%TYPE,
  SALIDAESPERADA       BOOLEAN)
AS	
SALIDA BOOLEAN := TRUE;	
N_PRODUCTOS NUMBER;
BEGIN	
    /* ELIMINAR PRODUCTOS */	
    DELETE FROM PRODUCTOS WHERE OID_PRODUCTO = P_OID;	
    	
    /* VERIFICAR QUE EL PRODUCTO NO SE ENCUENTRA EN LA BD */	
    SELECT COUNT (*) INTO N_PRODUCTOS FROM PRODUCTOS WHERE OID_PRODUCTO = P_OID;	
    IF(N_PRODUCTOS<>0) THEN
      SALIDA := FALSE;	
    END IF;	
    COMMIT WORK;	
    	
/* MOSTRAR RESULTADOS DE LA PRUEBA */	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));	
EXCEPTION	
WHEN OTHERS THEN 	
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));	
    ROLLBACK;
END ELIMINAR;
END PRUEBAS_PRODUCTOS;
/


CREATE OR REPLACE PACKAGE BODY PRUEBAS_CONTIENEN AS

PROCEDURE INICIALIZAR AS
    BEGIN
        DELETE FROM CONTIENEN;
    END INICIALIZAR;


PROCEDURE INSERTAR (
    NOMBRE_PRUEBA        VARCHAR2,
    CO_P IN CONTIENEN.OID_PRODUCTO%TYPE,
    CO_TA IN CONTIENEN.TIPOALERGENO%TYPE,
    SALIDAESPERADA       BOOLEAN
) AS

SALIDA BOOLEAN := TRUE;
P_CONTIENEN CONTIENEN%ROWTYPE;
P_CONT CONTIENEN.OID_CONTIENE%TYPE;

BEGIN
    INSERT INTO CONTIENEN (OID_CONTIENE, OID_PRODUCTO, TIPOALERGENO)
    VALUES (SEC_CONTIENEN.NEXTVAL, CO_P, CO_TA);
    P_CONT := SEC_CONTIENEN.CURRVAL;
    SELECT * INTO P_CONTIENEN FROM CONTIENEN WHERE OID_CONTIENE = P_CONT ;
    IF (P_CONTIENEN.TIPOALERGENO <> CO_TA OR
    P_CONTIENEN.OID_PRODUCTO <> CO_P) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;


/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;


END INSERTAR;


PROCEDURE MODIFICAR(
    NOMBRE_PRUEBA        VARCHAR2,
    CO_C IN CONTIENEN.OID_CONTIENE%TYPE,
    CO_P IN CONTIENEN.OID_PRODUCTO%TYPE,
    CO_TA IN CONTIENEN.TIPOALERGENO%TYPE,
    SALIDAESPERADA       BOOLEAN
    ) AS

SALIDA BOOLEAN := TRUE;
P_CONTIENEN CONTIENEN%ROWTYPE;

BEGIN
UPDATE CONTIENEN SET
    OID_PRODUCTO = CO_P,
    TIPOALERGENO = CO_TA
WHERE OID_CONTIENE = CO_C;
SELECT * INTO P_CONTIENEN FROM CONTIENEN WHERE OID_CONTIENE = CO_C;
  IF (P_CONTIENEN.OID_PRODUCTO <> CO_P OR
  P_CONTIENEN.TIPOALERGENO <> CO_TA) THEN
    SALIDA := FALSE;
  END IF;
  COMMIT WORK;


/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END MODIFICAR;


PROCEDURE ELIMINAR(
    NOMBRE_PRUEBA        VARCHAR2,
    CO_C IN CONTIENEN.OID_CONTIENE%TYPE,
    SALIDAESPERADA       BOOLEAN
)
AS
N_CONTIENEN NUMBER;
SALIDA BOOLEAN := TRUE;

BEGIN
    DELETE FROM CONTIENEN WHERE OID_CONTIENE = CO_C;
    SELECT COUNT (*) INTO N_CONTIENEN FROM CONTIENEN WHERE OID_CONTIENE = CO_C;
    IF(N_CONTIENEN<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;

/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END ELIMINAR;
END PRUEBAS_CONTIENEN;
/


CREATE OR REPLACE PACKAGE BODY PRUEBAS_LINEASPEDIDOS AS

PROCEDURE INICIALIZAR AS
BEGIN
DELETE FROM LINEASPEDIDOS;
END INICIALIZAR;


PROCEDURE INSERTAR (
    NOMBRE_PRUEBA      VARCHAR2,
    LP_PED IN LINEASPEDIDOS.ID_PEDIDO%TYPE,
    LP_PROD IN LINEASPEDIDOS.OID_PRODUCTO%TYPE,
    LP_CANT IN LINEASPEDIDOS.CANTIDAD%TYPE,
    SALIDAESPERADA      BOOLEAN
) AS

SALIDA BOOLEAN := TRUE;
P_LINEASPEDIDOS LINEASPEDIDOS%ROWTYPE;
P_CONT LINEASPEDIDOS.OID_LINEAPEDIDO%TYPE;

BEGIN


INSERT INTO LINEASPEDIDOS
VALUES (SEC_LINEASPEDIDOS.NEXTVAL, LP_PED, LP_PROD, LP_CANT);
P_CONT := SEC_LINEASPEDIDOS.CURRVAL;
SELECT * INTO P_LINEASPEDIDOS FROM LINEASPEDIDOS WHERE OID_LINEAPEDIDO = P_CONT ;
  IF (P_LINEASPEDIDOS.ID_PEDIDO <> LP_PED OR
  P_LINEASPEDIDOS.OID_PRODUCTO <> LP_PROD OR
  P_LINEASPEDIDOS.CANTIDAD <> LP_CANT) THEN
    SALIDA := FALSE;
  END IF;
  COMMIT WORK;


/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;


END INSERTAR;


PROCEDURE MODIFICAR(
    NOMBRE_PRUEBA      VARCHAR2,
    LP_LP IN LINEASPEDIDOS.OID_LINEAPEDIDO%TYPE,
    LP_PED IN LINEASPEDIDOS.ID_PEDIDO%TYPE,
    LP_PROD IN LINEASPEDIDOS.OID_PRODUCTO%TYPE,
    LP_CANT IN LINEASPEDIDOS.CANTIDAD%TYPE,
    SALIDAESPERADA      BOOLEAN
    ) AS

SALIDA BOOLEAN := TRUE;
P_LINEASPEDIDOS LINEASPEDIDOS%ROWTYPE;

BEGIN
UPDATE LINEASPEDIDOS SET
    ID_PEDIDO = LP_PED,
    OID_PRODUCTO = LP_PROD,
    CANTIDAD = LP_CANT
WHERE OID_LINEAPEDIDO = LP_LP;
SELECT * INTO P_LINEASPEDIDOS FROM LINEASPEDIDOS WHERE OID_LINEAPEDIDO = LP_LP;
  IF (P_LINEASPEDIDOS.ID_PEDIDO <> LP_PED OR
  P_LINEASPEDIDOS.OID_PRODUCTO <> LP_PROD OR
  P_LINEASPEDIDOS.CANTIDAD <> LP_CANT) THEN
    SALIDA := FALSE;
  END IF;
  COMMIT WORK;


/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END MODIFICAR;


PROCEDURE ELIMINAR(
    NOMBRE_PRUEBA        VARCHAR2,
    LP_LP IN LINEASPEDIDOS.OID_LINEAPEDIDO%TYPE,
    SALIDAESPERADA       BOOLEAN
)
AS
N_LINEASPEDIDOS NUMBER;
SALIDA BOOLEAN := TRUE;

BEGIN
    DELETE FROM LINEASPEDIDOS WHERE OID_LINEAPEDIDO = LP_LP;
    SELECT COUNT (*) INTO N_LINEASPEDIDOS FROM LINEASPEDIDOS WHERE OID_LINEAPEDIDO = LP_LP;
    IF(N_LINEASPEDIDOS<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;

/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END ELIMINAR;
END PRUEBAS_LINEASPEDIDOS;
/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_INGREDIENTES AS

PROCEDURE INICIALIZAR AS
BEGIN
    /* BORRAR CONTENIDO DE LA TABLA */
    DELETE FROM INGREDIENTES;
END INICIALIZAR;

PROCEDURE INSERTAR
  (NOMBRE_PRUEBA       VARCHAR2,
  I_N IN INGREDIENTES.NOMBRE%TYPE,
  I_S IN INGREDIENTES.STOCK%TYPE,
   SALIDAESPERADA      BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
I_INGREDIENTES INGREDIENTES%ROWTYPE;
I_OID NUMBER;

BEGIN
    
    /* INSERTAR INGREDIENTES */
    INSERT INTO INGREDIENTES(OID_INGREDIENTE,NOMBRE,STOCK)
    VALUES(SEC_INGREDIENTES.NEXTVAL,I_N,I_S);

    /* SELECCIONAR INGREDIENTES Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
    I_OID := SEC_INGREDIENTES.CURRVAL;
    SELECT * INTO I_INGREDIENTES FROM INGREDIENTES WHERE OID_INGREDIENTE = I_OID;
    IF (I_INGREDIENTES.NOMBRE <> I_N OR
    I_INGREDIENTES.STOCK<> I_S) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END INSERTAR;

PROCEDURE MODIFICAR (
  NOMBRE_PRUEBA VARCHAR2,
  I_OID IN INGREDIENTES.OID_INGREDIENTE%TYPE,
  I_N IN INGREDIENTES.NOMBRE%TYPE,
  I_S IN INGREDIENTES.STOCK%TYPE,
 
  SALIDAESPERADA BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
I_INGREDIENTES INGREDIENTES%ROWTYPE;


BEGIN
    
    /* ACTUALIZAR INGREDIENTES */
    UPDATE INGREDIENTES SET OID_INGREDIENTE=I_OID   WHERE OID_INGREDIENTE = I_OID;
    UPDATE INGREDIENTES SET NOMBRE=I_N    WHERE OID_INGREDIENTE = I_OID;
    UPDATE INGREDIENTES SET STOCK=I_S        WHERE OID_INGREDIENTE = I_OID;
    

    /* SELECCIONAR INGREDIENTES Y COMPROBAR QUE LOS CAMPOS SE HAN ACTUALIZADO CORRECTAMENTE */
    SELECT * INTO I_INGREDIENTES FROM INGREDIENTES WHERE OID_INGREDIENTE = I_OID;
    IF(I_INGREDIENTES.NOMBRE<>I_N OR
    I_INGREDIENTES.STOCK<>I_S OR
    I_INGREDIENTES.OID_INGREDIENTE<>I_OID) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END MODIFICAR;

PROCEDURE ELIMINAR (
  NOMBRE_PRUEBA VARCHAR2,
  I_OID IN INGREDIENTES.OID_INGREDIENTE%TYPE,
  SALIDAESPERADA BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
N_INGREDIENTES NUMBER;

BEGIN

    /* ELIMINAR INGREDIENTES */
    DELETE FROM INGREDIENTES WHERE OID_INGREDIENTE = I_OID;
    
    /* VERIFICAR QUE EL INGREDIENTES NO SE ENCUENTRA EN LA BD */
    SELECT COUNT (*) INTO N_INGREDIENTES FROM INGREDIENTES WHERE OID_INGREDIENTE = I_OID;
    IF(N_INGREDIENTES<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END ELIMINAR;

END PRUEBAS_INGREDIENTES;

/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_ENGLOBAN AS

PROCEDURE INICIALIZAR AS
BEGIN
    /* BORRAR CONTENIDO DE LA TABLA */
    DELETE FROM ENGLOBAN;
END INICIALIZAR;

PROCEDURE INSERTAR
  (NOMBRE_PRUEBA       VARCHAR2,
   E_P IN ENGLOBAN.OID_PRODUCTO%TYPE,
   E_I IN ENGLOBAN.OID_INGREDIENTE%TYPE,
   SALIDAESPERADA      BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
E_ENGLOBAN ENGLOBAN%ROWTYPE;
E_E ENGLOBAN.OID_PRODUCTO%TYPE;

BEGIN
    
    /* INSERTAR PRODUCTOSERVICIO */
    INSERT INTO ENGLOBAN
    VALUES(SEC_ENGLOBAN.NEXTVAL, E_P, E_I);

    /* SELECCIONAR PRODUCTOSERVICIO Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
    E_E := SEC_ENGLOBAN.CURRVAL;
    SELECT * INTO E_ENGLOBAN FROM ENGLOBAN WHERE OID_ENGLOBA = E_E;
    IF (E_ENGLOBAN.OID_PRODUCTO <> E_P OR
    E_ENGLOBAN.OID_INGREDIENTE <> E_I) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END INSERTAR;

PROCEDURE MODIFICAR (
  NOMBRE_PRUEBA VARCHAR2,
  E_E IN ENGLOBAN.OID_ENGLOBA%TYPE,
  E_P IN ENGLOBAN.OID_PRODUCTO%TYPE,
  E_I IN ENGLOBAN.OID_INGREDIENTE%TYPE,
  SALIDAESPERADA BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
E_ENGLOBAN ENGLOBAN%ROWTYPE;


BEGIN
    
    /* ACTUALIZAR PRODUCTOSERVICIO */
    UPDATE ENGLOBAN SET
    OID_ENGLOBA = E_E,
    OID_PRODUCTO = E_P,
    OID_INGREDIENTE = E_E
    WHERE OID_ENGLOBA = E_E;

    /* SELECCIONAR PRODUCTOSERVICIO Y COMPROBAR QUE LOS CAMPOS SE HAN ACTUALIZADO CORRECTAMENTE */
    SELECT * INTO E_ENGLOBAN FROM ENGLOBAN WHERE OID_ENGLOBA = E_E;
    IF(E_ENGLOBAN.OID_PRODUCTO<>E_P OR
    E_ENGLOBAN.OID_INGREDIENTE<>E_I) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END MODIFICAR;

PROCEDURE ELIMINAR (
  NOMBRE_PRUEBA VARCHAR2,
  E_E IN ENGLOBAN.OID_ENGLOBA%TYPE,
  SALIDAESPERADA BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
N_ENGLOBAN NUMBER;

BEGIN

    /* ELIMINAR PRODUCTOSERVICIO */
    DELETE FROM ENGLOBAN WHERE OID_ENGLOBA = E_E;
    
    /* VERIFICAR QUE EL PRODUCTOSERVICIO NO SE ENCUENTRA EN LA BD */
    SELECT COUNT (*) INTO N_ENGLOBAN FROM ENGLOBAN WHERE OID_ENGLOBA = E_E;
    IF(N_ENGLOBAN<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END ELIMINAR;

END PRUEBAS_ENGLOBAN;

/

CREATE OR REPLACE PACKAGE BODY PRUEBAS_PROVEEDORES AS
	
	
PROCEDURE INICIALIZAR AS
	
BEGIN
	
    /* BORRAR CONTENIDO DE LA TABLA */
	
    DELETE FROM PROVEEDORES;
	
END INICIALIZAR;
	
	
PROCEDURE INSERTAR 
	
  (NOMBRE_PRUEBA       VARCHAR2,	
  P_NIF IN PROVEEDORES.NIF%TYPE,
  P_TLF IN PROVEEDORES.TLF%TYPE,
  P_NOM IN PROVEEDORES.NOMBRE%TYPE,
  P_DOM IN PROVEEDORES.DOMICILIO%TYPE,
	   SALIDAESPERADA      BOOLEAN)
	
AS
	
	
SALIDA BOOLEAN := TRUE;	
P_PROVEEDORES PROVEEDORES%ROWTYPE;
--P_NIF PROVEEDORES.NIF%TYPE;	

	
	
BEGIN
	
    
	
    /* INSERTAR PROVEEDORES */	
    INSERT INTO PROVEEDORES
	
    VALUES(P_NIF, P_TLF, P_NOM, P_DOM);
	
	
    /* SELECCIONAR PROVEEDORES Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
	
    --P_NIF := SEC_PROVEEDORES.CURRVAL;
	
    SELECT * INTO P_PROVEEDORES FROM PROVEEDORES WHERE NIF = P_NIF;
	
    IF (P_PROVEEDORES.NIF <> P_NIF OR
	
    P_PROVEEDORES.TLF <> P_TLF OR
	
    P_PROVEEDORES.NOMBRE <> P_NOM OR
	
    P_PROVEEDORES.DOMICILIO <> P_DOM) THEN
	
        SALIDA := FALSE;
	
    END IF;
	
    COMMIT WORK;
	
    
	
/* MOSTRAR RESULTADOS DE LA PRUEBA */
	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
	
EXCEPTION
	
WHEN OTHERS THEN 
	
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
	
    ROLLBACK;
	
END INSERTAR;	
	
PROCEDURE MODIFICAR (
	
  NOMBRE_PRUEBA VARCHAR2,
	
  P_NIF IN PROVEEDORES.NIF%TYPE,
  P_TLF IN PROVEEDORES.TLF%TYPE,
  P_NOM IN PROVEEDORES.NOMBRE%TYPE,
  P_DOM IN PROVEEDORES.DOMICILIO%TYPE,
  SALIDAESPERADA BOOLEAN)
	
AS
	
	
SALIDA BOOLEAN := TRUE;
	
P_PROVEEDORES PROVEEDORES%ROWTYPE;
--P_NIF PROVEEDORES.NIF%TYPE;
	
	
	
BEGIN
	
    
	
    /* ACTUALIZAR PROVEEDORES */
	
    UPDATE PROVEEDORES SET
	
    NIF = P_NIF,	
    TLF = P_TLF,	
    NOMBRE = P_NOM,	
    DOMICILIO = P_DOM
    
    WHERE NIF = P_NIF;
	
	
    /* SELECCIONAR PROVEEDORES Y COMPROBAR QUE LOS CAMPOS SE HAN ACTUALIZADO CORRECTAMENTE */
	
    SELECT * INTO P_PROVEEDORES FROM PROVEEDORES WHERE NIF = P_NIF;
	
    IF(P_PROVEEDORES.TLF<>P_TLF OR
	
    P_PROVEEDORES.NOMBRE<>P_NOM OR
	
    P_PROVEEDORES.DOMICILIO<>P_DOM) THEN
	
      SALIDA := FALSE;
	
    END IF;
	
    COMMIT WORK;
	
    
	
/* MOSTRAR RESULTADOS DE LA PRUEBA */
	
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
	
EXCEPTION
	
WHEN OTHERS THEN 
	
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
	
    ROLLBACK;
	
	
END MODIFICAR;
	
PROCEDURE ELIMINAR (

  NOMBRE_PRUEBA VARCHAR2,
	
  P_NIF IN PROVEEDORES.NIF%TYPE,
	
  SALIDAESPERADA BOOLEAN)
	
AS
	
	
SALIDA BOOLEAN := TRUE;
	
N_PROVEEDORES NUMBER;
	
BEGIN
	
    /* ELIMINAR PROVEEDORES */
	
    DELETE FROM PROVEEDORES WHERE NIF = P_NIF;
	
    
	
    /* VERIFICAR QUE EL PROVEEDORES NO SE ENCUENTRA EN LA BD */
	
    SELECT COUNT (*) INTO N_PROVEEDORES FROM PROVEEDORES WHERE NIF = P_NIF;
	
    IF(N_PROVEEDORES<>0) THEN
	
      SALIDA := FALSE;
	
    END IF;
	
    COMMIT WORK;
	
    

/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END ELIMINAR;
END PRUEBAS_PROVEEDORES;
/



CREATE OR REPLACE PACKAGE BODY PRUEBAS_ENCARGOS AS

PROCEDURE INICIALIZAR AS
BEGIN
    /* BORRAR CONTENIDO DE LA TABLA */
    DELETE FROM ENCARGOS;
END INICIALIZAR;

PROCEDURE INSERTAR
  (NOMBRE_PRUEBA       VARCHAR2,
  E_FECH IN ENCARGOS.FECHA%TYPE,
  E_NIF IN ENCARGOS.NIF%TYPE,
  SALIDAESPERADA      BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
E_ENCARGOS ENCARGOS%ROWTYPE;
E_OID ENCARGOS.OID_ENCARGO%TYPE;

BEGIN
    
    /* INSERTAR PRODUCTOSERVICIO */
    INSERT INTO ENCARGOS
    VALUES(SEC_ENCARGOS.NEXTVAL, E_FECH, E_NIF);

    /* SELECCIONAR PRODUCTOSERVICIO Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
    E_OID := SEC_ENCARGOS.CURRVAL;
    SELECT * INTO E_ENCARGOS FROM ENCARGOS WHERE OID_ENCARGO = E_OID;
    IF (E_ENCARGOS.FECHA <> E_FECH OR
    E_ENCARGOS.NIF <> E_NIF) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END INSERTAR;

PROCEDURE MODIFICAR
  (NOMBRE_PRUEBA      VARCHAR2,
  E_OID IN ENCARGOS.OID_ENCARGO%TYPE,
  E_FECH IN ENCARGOS.FECHA%TYPE,
  E_NIF IN ENCARGOS.NIF%TYPE,
  SALIDAESPERADA    BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
E_ENCARGOS ENCARGOS%ROWTYPE;


BEGIN
    
    /* ACTUALIZAR PRODUCTOSERVICIO */
UPDATE ENCARGOS SET
    OID_ENCARGO = E_OID,
    FECHA = E_FECH,
    NIF = E_NIF
WHERE OID_ENCARGO = E_OID;

    /* SELECCIONAR PRODUCTOSERVICIO Y COMPROBAR QUE LOS CAMPOS SE HAN ACTUALIZADO CORRECTAMENTE */
    SELECT * INTO E_ENCARGOS FROM ENCARGOS WHERE OID_ENCARGO = E_OID;
    IF(E_ENCARGOS.FECHA<>E_FECH OR
    E_ENCARGOS.NIF<>E_NIF) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END MODIFICAR;

PROCEDURE ELIMINAR (
  NOMBRE_PRUEBA VARCHAR2,
  E_OID IN ENCARGOS.OID_ENCARGO%TYPE,
  SALIDAESPERADA BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
N_ENCARGOS NUMBER;

BEGIN

    /* ELIMINAR PRODUCTOSERVICIO */
    DELETE FROM ENCARGOS WHERE OID_ENCARGO = E_OID;
    
    /* VERIFICAR QUE EL PRODUCTOSERVICIO NO SE ENCUENTRA EN LA BD */
    SELECT COUNT (*) INTO N_ENCARGOS FROM ENCARGOS WHERE OID_ENCARGO = E_OID;
    IF(N_ENCARGOS<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END ELIMINAR;

END PRUEBAS_ENCARGOS;

/


CREATE OR REPLACE PACKAGE BODY PRUEBAS_LINEASENCARGOS AS

PROCEDURE INICIALIZAR AS
BEGIN
    /* BORRAR CONTENIDO DE LA TABLA */
    DELETE FROM LINEASENCARGOS;
END INICIALIZAR;

PROCEDURE INSERTAR
  (NOMBRE_PRUEBA    VARCHAR2,
  LE_INGREDIENTE IN LINEASENCARGOS.OID_INGREDIENTE%TYPE,
  LE_ENCARGO IN LINEASENCARGOS.OID_ENCARGO%TYPE,
  LE_CANTIDAD IN LINEASENCARGOS.CANTIDAD%TYPE,
  SALIDAESPERADA    BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
LE_LINEASENCARGOS LINEASENCARGOS%ROWTYPE;
LE_LINEAENCARGO LINEASENCARGOS.OID_LINEAENCARGO%TYPE;

BEGIN
    
    /* INSERTAR PRODUCTOSERVICIO */
    INSERT INTO LINEASENCARGOS
    VALUES(SEC_LINEASENCARGOS.NEXTVAL, LE_INGREDIENTE, LE_ENCARGO, LE_CANTIDAD);

    /* SELECCIONAR PRODUCTOSERVICIO Y COMPROBAR QUE LOS DATOS SE INSERTAN CORRECTAMENTE */
    LE_LINEAENCARGO := SEC_LINEASENCARGOS.CURRVAL;
    SELECT * INTO LE_LINEASENCARGOS FROM LINEASENCARGOS WHERE OID_LINEAENCARGO = LE_LINEAENCARGO;
    IF (LE_LINEASENCARGOS.OID_INGREDIENTE <> LE_INGREDIENTE OR
    LE_LINEASENCARGOS.OID_ENCARGO <> LE_ENCARGO OR
    LE_LINEASENCARGOS.CANTIDAD <> LE_CANTIDAD) THEN
        SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;
END INSERTAR;

PROCEDURE MODIFICAR (
  NOMBRE_PRUEBA VARCHAR2,
   LE_LINEAENCARGO IN LINEASENCARGOS.OID_LINEAENCARGO%TYPE,
   LE_INGREDIENTE IN LINEASENCARGOS.OID_INGREDIENTE%TYPE,
   LE_ENCARGO IN LINEASENCARGOS.OID_ENCARGO%TYPE,
   LE_CANTIDAD IN LINEASENCARGOS.CANTIDAD%TYPE,
  SALIDAESPERADA BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
LE_LINEASENCARGOS LINEASENCARGOS%ROWTYPE;


BEGIN
    
    /* ACTUALIZAR PRODUCTOSERVICIO */
    UPDATE LINEASENCARGOS SET
    OID_LINEAENCARGO = LE_LINEAENCARGO,
    OID_INGREDIENTE = LE_INGREDIENTE,
    OID_ENCARGO = LE_ENCARGO,
    CANTIDAD = LE_CANTIDAD
    WHERE OID_LINEAENCARGO = LE_LINEAENCARGO;

    /* SELECCIONAR PRODUCTOSERVICIO Y COMPROBAR QUE LOS CAMPOS SE HAN ACTUALIZADO CORRECTAMENTE */
    SELECT * INTO LE_LINEASENCARGOS FROM LINEASENCARGOS WHERE OID_LINEAENCARGO = LE_LINEAENCARGO;
    IF(LE_LINEASENCARGOS.OID_INGREDIENTE <> LE_INGREDIENTE OR
    LE_LINEASENCARGOS.OID_ENCARGO <> LE_ENCARGO OR
    LE_LINEASENCARGOS.CANTIDAD <> LE_CANTIDAD) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END MODIFICAR;

PROCEDURE ELIMINAR (
  NOMBRE_PRUEBA VARCHAR2,
  LE_LINEAENCARGO IN LINEASENCARGOS.OID_LINEAENCARGO%TYPE,
  SALIDAESPERADA BOOLEAN)
AS

SALIDA BOOLEAN := TRUE;
N_LINEASENCARGOS NUMBER;

BEGIN

    /* ELIMINAR PRODUCTOSERVICIO */
    DELETE FROM LINEASENCARGOS WHERE OID_LINEAENCARGO = LE_LINEAENCARGO;
    
    /* VERIFICAR QUE EL PRODUCTOSERVICIO NO SE ENCUENTRA EN LA BD */
    SELECT COUNT (*) INTO N_LINEASENCARGOS FROM LINEASENCARGOS WHERE OID_LINEAENCARGO = LE_LINEAENCARGO;
    IF(N_LINEASENCARGOS<>0) THEN
      SALIDA := FALSE;
    END IF;
    COMMIT WORK;
    
/* MOSTRAR RESULTADOS DE LA PRUEBA */
DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(SALIDA, SALIDAESPERADA));
EXCEPTION
WHEN OTHERS THEN 
    DBMS_OUTPUT.PUT_LINE(NOMBRE_PRUEBA || ' -> ' || ASSERT_EQUALS(FALSE, SALIDAESPERADA));
    ROLLBACK;

END ELIMINAR;

END PRUEBAS_LINEASENCARGOS;

/



